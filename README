rpc port: 15063
net port: 15064

# Ritzpluz

Ritzpluz: The Preferred Advanced Cryptocurrency

## What is Ritzpluz?
Ritzpluz is an advanced cryptocurrency. Taking development cues from Bitcoin & Litecoin and building upon it, Ritzpluz now employs advanced X11 Hashing Algorithm coupled with Dark Gravity Wave Difficulty Retargeting Algorithm methodologies which boasts significant advantages over their Scrypt counterparts.

http://ritzcoin.com/

## License 
Ritzpluz is released under the terms of the MIT license. See [COPYING](COPYING)
for more information or see http://opensource.org/licenses/MIT.

## Development and contributions
Development is ongoing, and the development team, as well as other volunteers, can freely work in their own trees and submit pull requests when features or bug fixes are ready.

## Frequently Asked Questions

### How much Ritzpluz can exist? 
There will be 500,000,000 Ritzpluz.
Each subsequent block will grant 70 coins to encourage miners to continue to secure the network and make up for lost wallets on hard drives/phones/lost encryption passwords/etc.

### How to get Ritzpluz?
Ritzpluz uses an advanced X11 Hashing Algorithm. Because it was designed specifically for cryptocurrencies, X11 has the one of the most sophisticated cryptographic hashes currently in use. It has the advantage of a multi-hash system, meaning that in order for the algorithm to fail, all eleven of its hashes would have to fail at the same time. Taking into account the very minute probability that even one hash would be broken, the chance of the X11 system failing becomes almost zero.

Originally, a different payout scheme was envisioned with block rewards being determined by taking the maximum reward as per the block schedule and applying the result of a Mersenne Twister pseudo-random number generator to arrive at a number between 0 and the maximum reward.

###Development tips and tricks
---------------------------

**compiling for debugging**

Run configure with the --enable-debug option, then make. Or run configure with
CXXFLAGS="-g -ggdb -O0" or whatever debug flags you need.

**debug.log**

If the code is behaving strangely, take a look in the debug.log file in the data directory;
error and debugging messages are written there.

The -debug=... command-line option controls debugging; running with just -debug will turn
on all categories (and give you a very large debug.log file).

The Qt code routes qDebug() output to debug.log under category "qt": run with -debug=qt
to see it.
